% model calibration and fitting

%clear all;
%clc;
close all;

load Y.dat;

[m,n] = size(Y);
signal = Y(:,2);

x_axis = linspace(0,m,m);

figure(1);
plot(x_axis,signal,'r');
grid on;
xlabel('time step');
ylabel('signal');
legend('empirical signal vs. time')

% order_3 = 3;
% [fitted_model_3,prediction_error_3] = aryule(signal,order_3);
% figure(2);
% freqz(1,fitted_model_3);
% figure(3);
% zplane(1,fitted_model_3);
% 
% order_4 = 4;
% [fitted_model_4,prediction_error_4] = aryule(signal,order_4);
% figure(4);
% freqz(1,fitted_model_4);
% figure(5);
% zplane(1,fitted_model_4);
% 
% order_5 = 5;
% [fitted_model_5,prediction_error_5] = aryule(signal,order_5);
% figure(6);
% freqz(1,fitted_model_5);
% figure(7);
% zplane(1,fitted_model_5);
% 
% order_6 = 6;
% [fitted_model_6,prediction_error_6] = aryule(signal,order_6);
% figure(8);
% freqz(1,fitted_model_6);
% figure(9);
% zplane(1,fitted_model_6);
% 
% order_7 = 7;
% [fitted_model_7,prediction_error_7] = aryule(signal,order_7);
% figure(10);
% freqz(1,fitted_model_7);
% figure(11);
% zplane(1,fitted_model_7);
% 
% order_8 = 8;
% [fitted_model_8,prediction_error_8] = aryule(signal,order_8);
% figure(12);
% freqz(1,fitted_model_8);
% figure(13);
% zplane(1,fitted_model_8);
% 
% order_9 = 9;
% [fitted_model_9,prediction_error_9] = aryule(signal,order_9);
% figure(14);
% freqz(1,fitted_model_9);
% figure(15);
% zplane(1,fitted_model_9);
% 
% order_10 = 10;
% [fitted_model_10,prediction_error_10] = aryule(signal,order_10);
% figure(16);
% freqz(1,fitted_model_10);
% figure(17);
% zplane(1,fitted_model_10);
% 
% order = [order_3 order_6 order_10];
% prediction_error = [prediction_error_3 prediction_error_6 prediction_error_10];
% figure(18);
% plot(order,prediction_error,'r');
% grid on;
% xlabel('order of AR model');
% ylabel('prediction error');
% legend('prediction error vs. order')

% 4.

signal_variance = var(signal);
P = 1;

for order = 1:10
[fitted_model,prediction_error] = aryule(signal,order);
benefit(order) = m*log2(1+signal_variance/P^2)-m*log2(1+prediction_error/P^2)-5*order;
order_vector(order) = order;
end

figure(19);
plot(order_vector,benefit,'r');
grid on;

[max_benefit,optimal_order] = max(benefit);

% 5.

signal_mean = signal - mean(signal); % repeat procedure for signal_mean - order: 2 to 20.

% 7.

T = 144;

% preprocessing
    for i=1:m
if (i<=T)
    signal_T(i) = signal(i);
    else
    signal_T(i) = signal(i) - signal(i-T);
    end
    end

    % 8.

    signal_half = signal(1:504);

    T = 144;

    % preprocessing
    for i=1:(m/2)
if (i<=T)
    signal_half_T(i) = signal_half(i);
    else
    signal__half_T(i) = signal_half(i) - signal_half(i-T);
    end
    end

    signal_half_variance = var(signal_half);
    P = 1;

    for order = 1:10
    [fitted_model,prediction_error] = aryule(signal_half,order);
    benefit(order) = (m/2)*log2(1+signal_half_variance/P^2)-(m/2)*log2(1+prediction_error/P^2)-2*order;
    order_vector(order) = order;
    temp_prediction_error(order) = prediction_error;
    end

    figure(20);
    plot(order_vector(3:end),benefit(3:end),'r');
    grid on;

    [max_benefit,optimal_order] = max(benefit);
    prediction_error_optimal = temp_prediction_error(optimal_order);

    [fitted_model,temp_prediction_error] = aryule(signal_half,optimal_order);


    %********************** Kalman Filtering **********************

% G(z)

    % max_order = 144;
    % G_numerator = [1 zeros(1,max_order)];
    % G_denominator = [1 zeros(1,max_order-1) -1];
    % 
    % A_z = fitted_model;
    % 
    % temp_G = tf(G_numerator,G_denominator);
    % A = tf(A_z,1);
    % 
    % G = temp_G*A;
    % 
    % G_num = conv(G_numerator,A_z);
    % G_den = G_denominator;
    % 
    % %G_temp = tf(G_num,G_den);
    % 
    % [AA,BB,CC,DD] = tf2ss(G_num,G_den);

    max_order = T+optimal_order;

    G_num_temp = [1 zeros(1,T)];
    G_den_temp = [1 zeros(1,T-1) -1];

    A_z = fitted_model;

    G_num = G_num_temp;
    G_den = conv(G_den_temp,A_z);

    G = tf(G_num,G_den);

    [AA,BB,CC,DD] = tf2ss(G_num,G_den);

    s.A = AA;
    s.B = BB;
    s.H = CC;
    s.Q = prediction_error_optimal;
    s.R = prediction_error_optimal/5;

    s.x = Y((504-146):504,2); % duljina ovog vektora ovisi o optimalnom redu
    s.P = prediction_error_optimal;

    for i = 504:1008

    s.z = Y(i,2);

    s = kalmanf(s);

    innov(i) = s.i;

    Pi(i) = s.Pi;

    end

